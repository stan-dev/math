[/
 / Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:promises Promises]

[note This is an experimental feature.]

The [link boost_asio.reference.experimental__promise_lt__void_lp_Ts_ellipsis__rp__comma__Executor__gt_
`experimental::promise`] type and [link boost_asio.reference.experimental__use_promise
`experimental::use_promise`] completion token allow eager execution and
synchronisation of asynchronous operations. For example:

  auto promise = async_read(
      stream, boost::asio::buffer(my_buffer),
      boost::asio::experimental::use_promise);

  ... do other stuff while the read is going on ...

  promise.async_wait( // completion the operation
      [](error_code ec, std::size_t bytes_read)
      {
        ...
      });

Promises can be safely disregarded if the result is no longer required.
Different operations can be combined to either wait for all to complete or for
one to complete (and cancel the rest). For example, to wait for one to
complete:

  auto timeout_promise =
    timer.async_wait(
      boost::asio::experimental::use_promise);

  auto read_promise = async_read(
      stream, boost::asio::buffer(my_buffer),
      boost::asio::experimental::use_promise);

  auto promise =
    boost::asio::experimental::promise<>::race(
      timeout_promise, read_promise);

  promise.async_wait(
      [](std::variant<error_code, std::tuple<error_code, std::size_t>> v)
      {
        if (v.index() == 0) {} //timed out
        else if (v.index() == 1) // completed in time
      });

or to wait for all to complete:

  auto write_promise = async_write(
      stream, boost::asio::buffer(my_write_buffer),
      boost::asio::experimental::use_promise);

  auto read_promise = async_read(
      stream, boost::asio::buffer(my_buffer),
      boost::asio::experimental::use_promise);

  auto promise =
    boost::asio::experimental::promise<>::all(
      write_promise, read_promise);

  promise.async_wait(
      [](std::tuple<error_code, std::size_t> write_result,
        std::tuple<error_code, std::size_t> read_result)
      {
        // ...
      });

[heading See Also]

[link boost_asio.reference.experimental__promise_lt__void_lp_Ts_ellipsis__rp__comma__Executor__gt_ promise],
[link boost_asio.reference.experimental__use_promise use_promise].

[endsect]
