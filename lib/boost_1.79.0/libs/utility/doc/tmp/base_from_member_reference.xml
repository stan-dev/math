<?xml version="1.0" standalone="yes"?>
<library-reference id="base_from_member.reference"><title>Reference</title><header name="boost/utility/base_from_member.hpp">
<namespace name="boost">
<class name="base_from_member"><template>
      <template-type-parameter name="MemberType"/>
      <template-nontype-parameter name="UniqueID"><type>int</type><default>0</default></template-nontype-parameter>
    </template><method-group name="protected member functions">
</method-group>
<constructor specifiers="explicit" cv="noexcept(BOOST_NOEXCEPT_EXPR(::new((void *) 0) MemberType(static_cast&lt; T &amp;&amp; &gt;(x)...))))"><template>
          <template-nontype-parameter name="T"><type>typename ...</type></template-nontype-parameter>
          <template-type-parameter name="EnableIf"><default>typename ::boost::detail::enable_if_unrelated&lt;<classname alt="boost::base_from_member">base_from_member</classname>, T...&gt;::type</default></template-type-parameter>
        </template><parameter name="x"><paramtype>T &amp;&amp;...</paramtype></parameter></constructor>
</class><class-specialization name="base_from_member"><template>
      <template-type-parameter name="MemberType"/>
      <template-nontype-parameter name="UniqueID"><type>int</type></template-nontype-parameter>
    </template><specialization><template-arg>MemberType &amp;</template-arg><template-arg>UniqueID</template-arg></specialization><method-group name="protected member functions">
</method-group>
<constructor specifiers="explicit" cv="noexcept"><parameter name="x"><paramtype>MemberType &amp;</paramtype></parameter></constructor>
</class-specialization></namespace>
<macro name="BOOST_BASE_FROM_MEMBER_MAX_ARITY"/>
</header>
</library-reference>