###############################################################################
# Library locations

MATH ?=
BOOST ?= $(MATH)lib/boost_1.69.0
EIGEN ?= $(MATH)lib/eigen_3.3.3
OPENCL ?= $(MATH)lib/opencl_1.2.8
SUNDIALS ?= $(MATH)lib/sundials_4.1.0

GTEST ?= $(MATH)lib/gtest_1.8.1
CPPLINT ?= $(MATH)lib/cpplint_4.45

################################################################################
# SUNDIALS build rules
# Note: Files starting with f* are by SUNDIALS convention files needed for
#       Fortran bindings which we do not need for stan-math. Thus these targets
#       are ignored here. This convention was introduced with 4.0.
##

SUNDIALS_CVODES := $(patsubst %.c,%.o,\
  $(wildcard $(SUNDIALS)/src/cvodes/*.c) \
  $(wildcard $(SUNDIALS)/src/sundials/*.c) \
  $(wildcard $(SUNDIALS)/src/sunmatrix/band/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunmatrix/dense/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunlinsol/band/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunlinsol/dense/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunnonlinsol/newton/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunnonlinsol/fixedpoint/[^f]*.c))

SUNDIALS_IDAS := $(patsubst %.c,%.o,\
  $(wildcard $(SUNDIALS)/src/idas/*.c) \
  $(wildcard $(SUNDIALS)/src/sundials/*.c) \
  $(wildcard $(SUNDIALS)/src/sunmatrix/band/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunmatrix/dense/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunlinsol/band/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunlinsol/dense/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunnonlinsol/newton/[^f]*.c) \
  $(wildcard $(SUNDIALS)/src/sunnonlinsol/fixedpoint/[^f]*.c))

SUNDIALS_NVECSERIAL := $(patsubst %.c,%.o,\
  $(addprefix $(SUNDIALS)/src/, nvector/serial/nvector_serial.c sundials/sundials_math.c))

$(sort $(SUNDIALS_CVODES) $(SUNDIALS_IDAS) $(SUNDIALS_NVECSERIAL)) : CXXFLAGS = $(CXXFLAGS_SUNDIALS) $(CXXFLAGS_OS) -O$(O) $(INC_SUNDIALS)
$(sort $(SUNDIALS_CVODES) $(SUNDIALS_IDAS) $(SUNDIALS_NVECSERIAL)) : CPPFLAGS = $(CPPFLAGS_SUNDIALS) $(CPPFLAGS_OS)
$(sort $(SUNDIALS_CVODES) $(SUNDIALS_IDAS) $(SUNDIALS_NVECSERIAL)) : %.o : %.c
	@mkdir -p $(dir $@)
	$(COMPILE.cpp) -x c -include $(SUNDIALS)/include/stan_sundials_printf_override.hpp $< $(OUTPUT_OPTION)

$(SUNDIALS)/lib/libsundials_cvodes.a: $(SUNDIALS_CVODES)
	@mkdir -p $(dir $@)
	$(AR) -rs $@ $^

$(SUNDIALS)/lib/libsundials_idas.a: $(SUNDIALS_IDAS)
	@mkdir -p $(dir $@)
	$(AR) -rs $@ $^

$(SUNDIALS)/lib/libsundials_nvecserial.a: $(SUNDIALS_NVECSERIAL)
	@mkdir -p $(dir $@)
	$(AR) -rs $@ $^

LIBSUNDIALS := $(SUNDIALS)/lib/libsundials_nvecserial.a $(SUNDIALS)/lib/libsundials_cvodes.a $(SUNDIALS)/lib/libsundials_idas.a

STAN_SUNDIALS_HEADERS := $(shell find $(MATH)stan -name *cvodes*.hpp) $(shell find $(MATH)stan -name *idas*.hpp)
$(STAN_SUNDIALS_HEADERS) : $(LIBSUNDIALS)

clean-sundials:
	@echo '  cleaning sundials targets'
	$(RM) $(wildcard $(sort $(SUNDIALS_CVODES) $(SUNDIALS_IDAS) $(SUNDIALS_NVECSERIAL) $(LIBSUNDIALS)))


############################################################
# MPI build rules

ifdef STAN_MPI

##
# Boost build options
BOOST_PARALLEL_JOBS ?= 1


$(BOOST)/user-config.jam:
	echo "# In case of a compiler mismatch used by mpicxx and" >> $(BOOST)/user-config.jam
	echo "# the compiler used for Stan, consider configuring" >> $(BOOST)/user-config.jam
	echo "# the boost toolset here" >> $(BOOST)/user-config.jam
	echo "# Moreover, should your mpicxx command live in a" >> $(BOOST)/user-config.jam
	echo "# in a non-standard directory, then consider to tell" >> $(BOOST)/user-config.jam
	echo "# boost mpi using this syntax:" >> $(BOOST)/user-config.jam
	echo "#using mpi : /path/to/mpicxx ;" >> $(BOOST)/user-config.jam
	echo "using mpi ;" >> $(BOOST)/user-config.jam

$(BOOST)/stage/lib/mpi.so: $(BOOST)/user-config.jam
	@mkdir -p $(dir $@)
	cd $(BOOST); ./bootstrap.sh
	cd $(BOOST); ./b2 --user-config=user-config.jam --layout=system --with-mpi --with-serialization -j$(BOOST_PARALLEL_JOBS) variant=release link=shared threading=multi runtime-link=shared hardcode-dll-paths=true dll-path="$(BOOST_LIBRARY_ABSOLUTE_PATH)"

$(BOOST)/stage/lib/libboost_serialization.so: $(BOOST)/stage/lib/mpi.so
$(BOOST)/stage/lib/libboost_mpi.so: $(BOOST)/stage/lib/mpi.so


$(BOOST)/stage/lib/libboost_serialization.dylib: $(BOOST)/stage/lib/mpi.so
	install_name_tool -add_rpath "$(BOOST_LIBRARY_ABSOLUTE_PATH)" "$(BOOST)/stage/lib/libboost_serialization.dylib"
	install_name_tool -id @rpath/libboost_serialization.dylib "$(BOOST)/stage/lib/libboost_serialization.dylib"
$(BOOST)/stage/lib/libboost_mpi.dylib: $(BOOST)/stage/lib/mpi.so $(BOOST)/stage/lib/libboost_serialization.dylib
	install_name_tool -add_rpath "$(BOOST_LIBRARY_ABSOLUTE_PATH)" "$(BOOST)/stage/lib/libboost_mpi.dylib"
	install_name_tool -change libboost_serialization.dylib @rpath/libboost_serialization.dylib "$(BOOST)/stage/lib/libboost_mpi.dylib"
	install_name_tool -id @rpath/libboost_mpi.dylib "$(BOOST)/stage/lib/libboost_mpi.dylib"

MPI_TEMPLATE_INSTANTIATION_CPP := $(shell find $(MATH)stan -type f -name 'mpi_*_inst.cpp') $(shell find $(MATH)stan -type f -name 'mpi_*_def.cpp')
MPI_TEMPLATE_INSTANTIATION := $(MPI_TEMPLATE_INSTANTIATION_CPP:%.cpp=%.o)

$(MPI_TEMPLATE_INSTANTIATION) : CXXFLAGS += -fPIC

clean-mpi:
	@echo '  cleaning mpi targets'
	$(RM) $(wildcard $(LIBMPI) $(MPI_INSTANTIATION))
	$(RM) -r $(wildcard $(BOOST)/stage/lib $(BOOST)/bin.v2 $(BOOST)/tools/build/src/engine/bootstrap/ $(BOOST)/tools/build/src/engine/bin.* $(BOOST)/project-config.jam* $(BOOST)/b2 $(BOOST)/bjam $(BOOST)/bootstrap.log)

endif

############################################################
# Google Test:
#   Build the google test library.
$(GTEST)/src/gtest-all.o: CXXFLAGS += $(CXXFLAGS_GTEST)
$(GTEST)/src/gtest-all.o: CPPFLAGS += $(CPPFLAGS_GTEST)
$(GTEST)/src/gtest-all.o: INC += $(INC_GTEST)



############################################################
# Clean all libraries

.PHONY: clean-libraries clean-sundials clean-mpi
clean-libraries: clean-sundials clean-mpi
