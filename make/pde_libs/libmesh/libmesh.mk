######################################################################
#
# Use the Make.common generated by libmesh configure
# process, unstally located at
# 
# $LIBMESH_DIR/Make.common
# 
# Though this is build dependent, the libmesh in
# Stan must be configured with a linear solver(petsc,
# trilinos, or eigen), as this is tested in unit tests.
# 
######################################################################

ifndef LIBMESH_DIR
$(error LIBMESH_DIR is not set)
endif

# define macro for prepropcessing
CPPFLAGS += -DSTAN_LIBMESH

# include the library options determined by configure
include $(LIBMESH_DIR)/Make.common

###############################################################################
# File management.  This is where the source, header, and object files are
# defined

#
# source files
LIBMESH_PROJ_SRC 	:= $(wildcard $(LIBMESH_PROJ_PATH)/libmesh_*.cpp)

#
# object files
LIBMESH_PROJ_OBJ		:= $(patsubst %.cpp, %.o, $(LIBMESH_PROJ_SRC))

$(LIBMESH_PROJ_PATH)/stan_libmesh_proj: $(LIBMESH_PROJ_OBJ)
	$(LINK.cpp) -o $@ $^
$(LIBMESH_PROJ_PATH)/stan_libmesh_test: $(LIBMESH_PROJ_OBJ) $(GTEST_MAIN) $(GTEST)/src/gtest-all.o
	$(LINK.cpp) -o $@ $^


###############################################################################

.PHONY: libmesh-dust libmesh-clean

###############################################################################
# amend flags with those from libmesh
#

CC = $(libmesh_CXX)
CPPFLAGS += $(libmesh_CPPFLAGS)
CXXFLAGS += $(libmesh_CXXFLAGS)
CXXFLAGS += -isystem $(LIBMESH_DIR)/include
CXXFLAGS += $(libmesh_INCLUDE)
CXXFLAGS :=$(filter-out -std=gnu++11,$(CXXFLAGS))
CXXFLAGS :=$(filter-out -Wunused,$(CXXFLAGS))
CXXFLAGS :=$(filter-out -Wunused-parameter,$(CXXFLAGS))
CXXFLAGS :=$(filter-out -Qunused-arguments,$(CXXFLAGS))
CXXFLAGS +=-DLIBMESH_HAVE_CXX14_MAKE_UNIQUE

LDFLAGS += $(libmesh_LIBS)
LDFLAGS += $(libmesh_LDFLAGS)
LDFLAGS += $(EXTERNAL_FLAGS)

# Useful rules.
libmesh-dust:
	@echo "Deleting old output and runtime files"
	@rm -f out*.m job_output.txt output.txt* *.gmv.* *.plt.* out*.xdr* out*.xda* PI* libmesh-complete

libmesh-clean:
	@rm -rf *.o .libs .depend

libmesh-echo:
	@echo LIBMESH_PROJ_SRC = $(LIBMESH_PROJ_SRC)
	@echo LIBMESH_PROJ_OBJ = $(LIBMESH_PROJ_OBJ)

libmesh-complete: $(wildcard *.in)
#	@$(MAKE) dust
	@$(MAKE) -C $(dir $(target)) $(notdir $(target))
	@echo "***************************************************************"
	@echo "* Running App " $(notdir $(target))
	@echo "***************************************************************"
	@echo " "
	${LIBMESH_RUN} $(target) ${LIBMESH_OPTIONS} 2>&1 | tee output.txt
	@bzip2 -f output.txt
	@echo " "
	@echo "***************************************************************"
	@echo "* Done Running App " $(notdir $(target))
	@echo "***************************************************************"

gmv:
	@$(MAKE) -C $(LIBMESH_DIR)/roy/meshplot/ meshplot-$(METHOD)
	@for file in out.mesh.*; do ${LIBMESH_RUN} $(LIBMESH_DIR)/roy/meshplot/meshplot-$(METHOD) $$file out.soln.$${file##out.mesh.} out.gmv.$${file:9:4}; done

# include the dependency list
-include .depend

#
# Dependencies
#
.depend: $(LIBMESH_PROJ_SRC) $(LIBMESH_DIR)/include/libmesh/*.h
	@$(perl) $(LIBMESH_DIR)/contrib/bin/make_dependencies.pl -I. $(foreach i, $(LIBMESH_DIR)/include $(wildcard $(LIBMESH_DIR)/include/*), -I$(i)) "-S\$$(obj-suffix)" $(LIBMESH_PROJ_SRC) > .depend

###############################################################################
