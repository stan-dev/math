N_TESTS ?= 100 # override this in make/local. If <= 0, N_TESTS + 1 is interpreted as the number of batches to group the tests into

##
# GTEST_MAIN is the file that contains the google test
##
GTEST_MAIN = $(GTEST)/src/gtest_main.cc
GTEST_CXXFLAGS += -isystem $(GTEST)/include -isystem $(GTEST) -O$O

##
# Build the google test library.
##
$(GTEST)/src/gtest-all.o: $(GTEST)/src/gtest-all.cc
	$(COMPILE.cpp) -o $@ $<

$(GTEST)/%.cc: ;

##
# Rule for generating dependencies.
##
.PRECIOUS: %.d
%.d : %.cpp
	@mkdir -p $(dir $@)
	@set -e; \
	rm -f $@; \
	$(COMPILE.cpp) -MM $< > $@.$$$$; \
	sed -e 's,\($(*F)\)\.o[ :]*,$(@D)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

%.d : %.hpp
	@mkdir -p $(dir $@)
	@set -e; \
	rm -f $@; \
	$(COMPILE.cpp) -MM $< > $@.$$$$; \
	sed -e 's,\($(*F)\)\.o[ :]*,$(@D)/\1.hpp.gch $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$
    $(eval include $$@)

##
# Adding a test for multiple translation units. If this fails,
# a new function is probably missing an inline
##

test/unit/multiple_translation_units%.o : test/unit/multiple_translation_units%.cpp
	$(COMPILE.cpp) -fPIC -O$O $< $(OUTPUT_OPTION)

test/unit/libmultiple.so : test/unit/multiple_translation_units1.o test/unit/multiple_translation_units2.o
	$(LINK.cpp) -shared -fPIC $(OUTPUT_OPTION) $^

test/unit/multiple_translation_units_test.cpp : test/unit/libmultiple.so


############################################################
#
# CVODES tests
##

CVODES_TESTS := $(subst .cpp,$(EXE),$(shell find test -name *cvodes*_test.cpp) $(shell find test -name *_bdf_*_test.cpp))
$(CVODES_TESTS) : $(LIBCVODES)

############################################################
#
# Target to verify header files within Stan has
# enough include calls
##
HEADER_TESTS := $(addsuffix -test,$(shell find stan -name '*.hpp' -type f))

ifeq ($(OS_TYPE),win)
  DEV_NULL = nul
else
  DEV_NULL = /dev/null
endif

.PHONY: HEADER_TESTS
%.hpp-test : %.hpp test/dummy.cpp
	$(COMPILE.cpp) -O0 -include $^ -o $(DEV_NULL)

test/dummy.cpp:
	@mkdir -p test
	@touch $@
	@echo "int main() {return 0;}" >> $@

.PHONY: test-headers
test-headers: $(HEADER_TESTS)

test/unit/math_include_test.o: test/unit/math_include_test.cpp
	$(COMPILE.cpp) $< -o $@

############################################################
#
# General make targets for tests
# (necessary now that implicit SUFFIX rules are actually turned off)
#

test/%$(EXE) : CXXFLAGS += $(GTEST_CXXFLAGS)
test/%$(EXE) : test/%.o $(GTEST_MAIN) $(GTEST)/src/gtest-all.o
	$(LINK.cpp) -o $@ $^

# We need these explicit targets here because we turned off suffixes. We can't
# make a more general pattern rule like test/%.o because we want to force make
# to generate the pre-compiled headers (below) when applicable.
test/unit/math_c11_test.o: test/unit/math_c11_test.cpp
	$(COMPILE.cpp) $< -o $@

test/unit/math/memory/%.o: test/unit/math/memory/%.cpp
	$(COMPILE.cpp) $< -o $@

############################################################
#
# Targets to include proper pre-compiled header files (.hpp.gch) for unit tests
# and distribution tests 
##

.PRECIOUS: %.hpp.gch test/%.o

%.hpp.gch: %.hpp %.d
	$(COMPILE.cpp) -o $@ $(@:.gch=)

test/prob/%.o : stan/math/mix/mat.hpp.gch test/prob/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/prim/scal/%.o : stan/math/prim/scal.hpp.gch test/unit/math/prim/scal/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/prim/arr/%.o : stan/math/prim/arr.hpp.gch test/unit/math/prim/arr/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/prim/mat/%.o : stan/math/prim/mat.hpp.gch test/unit/math/prim/mat/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/rev/core/%.o : stan/math/rev/core.hpp.gch test/unit/math/rev/core/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/rev/scal/%.o : stan/math/rev/scal.hpp.gch test/unit/math/rev/scal/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/rev/arr/%.o : stan/math/rev/arr.hpp.gch test/unit/math/rev/arr/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/rev/mat/%.o : stan/math/rev/mat.hpp.gch test/unit/math/rev/mat/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/fwd/core/%.o : stan/math/fwd/core.hpp.gch test/unit/math/fwd/core/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/fwd/scal/%.o : stan/math/fwd/scal.hpp.gch test/unit/math/fwd/scal/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/fwd/arr/%.o : stan/math/fwd/arr.hpp.gch test/unit/math/fwd/arr/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/fwd/mat/%.o : stan/math/fwd/mat.hpp.gch test/unit/math/fwd/mat/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/mix/scal/%.o : stan/math/mix/scal.hpp.gch test/unit/math/mix/scal/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/mix/arr/%.o : stan/math/mix/arr.hpp.gch test/unit/math/mix/arr/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

test/unit/math/mix/mat/%.o : stan/math/mix/mat.hpp.gch test/unit/math/mix/mat/%.cpp
	$(COMPILE.cpp) $(if $(filter $(CC_TYPE),clang++),-include-pch $<) -o $@ $(@:.o=.cpp)

# No stan/math/mix/core.hpp exists
test/unit/math/mix/core/%.o : test/unit/math/mix/core/%.cpp
	$(COMPILE.cpp) -o $@ $(@:.o=.cpp)


############################################################
##
# Test generator for distribution tests
##
test/prob/generate_tests$(EXE) : test/prob/generate_tests.cpp
	@mkdir -p $(dir $@)
	$(LINK.cpp) $< $(OUTPUT_OPTION)



## FIXME: think about how to do this generally using test_types
# test_types := v fd fv ffd ffv

test_name = $(shell echo $(1) | sed 's,_[0-9]\{5\},_test.hpp,g')

.SECONDEXPANSION:
test/prob/%_generated_v_test.cpp test/prob/%_generated_fd_test.cpp test/prob/%_generated_fv_test.cpp test/prob/%_generated_ffd_test.cpp test/prob/%_generated_ffv_test.cpp: test/prob/$$(call test_name,$$*) test/prob/generate_tests$(EXE)
	$(WINE) test/prob/generate_tests$(EXE) $< $(N_TESTS)

LIST_OF_GENERATED_TESTS := $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_v_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_fd_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_fv_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_ffd_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_ffv_test.cpp,g')

.PHONY: generate-tests
generate-tests: $(LIST_OF_GENERATED_TESTS)

##
# Include the test dependencies
##
include make/test-math-dependencies
