N_TESTS ?= 100
# override this in make/local. If <= 0, N_TESTS + 1 is interpreted as the number of batches
# to group the probability tests into

##
# Any targets in test/ (.d, .o, executable) needs the GTEST flags
##
test/% : CXXFLAGS += $(CXXFLAGS_GTEST)
test/% : CPPFLAGS += $(CPPFLAGS_GTEST)
test/% : INC += $(INC_GTEST)

test/%$(EXE) : test/%.o $(GTEST)/src/gtest_main.cc $(GTEST)/src/gtest-all.o $(MPI_TARGETS)
	$(LINK.cpp) $^ $(LDLIBS) $(OUTPUT_OPTION)

##
# Include dependency files for tests
##
ifneq ($(filter test/%,$(MAKECMDGOALS)),)
-include $(patsubst %$(EXE),%.d,$(filter test/%,$(MAKECMDGOALS)))
endif

##
# Adding a test for multiple translation units. If this fails,
# a new function is probably missing an inline
##

ifneq ($(OS),Windows_NT)
test/unit/multiple_translation_units%.o : CXXFLAGS += -fPIC
endif
test/unit/multiple_translation_units%.o : CXXFLAGS += -pipe
test/unit/libmultiple.so : LDFLAGS += -shared

test/unit/libmultiple.so : test/unit/multiple_translation_units1.o test/unit/multiple_translation_units2.o $(MPI_TARGETS)
	$(LINK.cpp) $^ $(LDLIBS) $(OUTPUT_OPTION)

test/unit/multiple_translation_units_test$(EXE): test/unit/libmultiple.so

############################################################
#
# CVODES tests
##

CVODES_TESTS := $(subst .cpp,$(EXE),$(shell find test -name *cvodes*_test.cpp) $(shell find test -name *_bdf_*_test.cpp) $(shell find test -name *_adams_*_test.cpp))
$(CVODES_TESTS) : $(LIBSUNDIALS)


############################################################
#
# IDAS tests
##

IDAS_TESTS := $(subst .cpp,$(EXE),$(shell find test -name *idas*_test.cpp) $(shell find test -name *_dae*_test.cpp))
$(IDAS_TESTS) : $(LIBSUNDIALS)


############################################################
#
# Target to verify header files within Stan has
# enough include calls
##
HEADER_TESTS := $(addsuffix -test,$(shell find stan -name '*.hpp' -type f))

ifeq ($(OS),Windows_NT)
  DEV_NULL = nul
else
  DEV_NULL = /dev/null
endif

%.hpp-test : %.hpp test/dummy.cpp
	$(COMPILE.cpp) $(CXXFLAGS) -O0 -include $^ -o $(DEV_NULL)

test/dummy.cpp:
	@mkdir -p test
	@touch $@
	@echo "int main() {return 0;}" >> $@

.PHONY: test-headers
test-headers: $(HEADER_TESTS)

############################################################
##
# Test generator for distribution tests
##
test/prob/generate_tests$(EXE) : test/prob/generate_tests.cpp
	@mkdir -p $(dir $@)
	$(LINK.cpp) $^ $(LDLIBS) $(OUTPUT_OPTION)


## FIXME: think about how to do this generally using test_types
# test_types := v fd fv ffd ffv

test_name = $(shell echo $(1) | sed 's,_[0-9]\{5\},_test.hpp,g')

.SECONDEXPANSION:
test/prob/%_generated_v_test.cpp test/prob/%_generated_fd_test.cpp test/prob/%_generated_fv_test.cpp test/prob/%_generated_ffd_test.cpp test/prob/%_generated_ffv_test.cpp: test/prob/$$(call test_name,$$*) test/prob/generate_tests$(EXE)
	$(WINE) test/prob/generate_tests$(EXE) $< $(N_TESTS)

LIST_OF_GENERATED_TESTS := $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_v_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_fd_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_fv_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_ffd_test.cpp,g') $(shell find test/prob -type f -name '*_test.hpp' | sed 's,_test.hpp,_00000_generated_ffv_test.cpp,g')

.PHONY: generate-tests
generate-tests: $(LIST_OF_GENERATED_TESTS)

##
# Include the test dependencies
##
include make/test-math-dependencies
